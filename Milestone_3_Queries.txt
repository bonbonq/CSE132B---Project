REPORT 1
a. Display the classes currently taken by student X:
	Generate form fields:
		SELECT * FROM student_quarter__attends NATURAL JOIN student WHERE idquarter=15 
	Generate result:
		SELECT * from student_instance AS si, quarter_course_class__instance AS instance, course_coursenumber AS c_cn, coursenumber AS cn, instance_section AS instance_section WHERE si.idstudent=? AND si.idinstance=instance.idinstance AND instance.idcourse=c_cn.idcourse AND cn.idcoursenumber=c_cn.idcoursenumber AND instance_section.idinstance=si.idinstance AND instance.idquarter=15 

b. Display the roster of class Y:
	Generate form fields:
		SELECT * from quarter_course_class__instance NATURAL JOIN quarter NATURAL JOIN course_coursenumber NATURAL JOIN coursenumber
	Generate result:
		SELECT * FROM student_instance NATURAL JOIN student WHERE student_instance.idinstance=?

c. Produce the grade report of student X:
	Generate form fields:
		SELECT * FROM student_quarter__attends NATURAL JOIN student
	Generate result:
		SELECT * FROM student_instance AS si, quarter_course_class__instance AS instance, quarter AS quarter WHERE si.idinstance=instance.idinstance AND si.idstudent=? AND instance.idquarter=quarter.idquarter ORDER BY quarter.year

d. Assist an undergraduate student X in figuring out remaining degree requirements for a bachelors in Y:
	Generate form fields:
		SELECT * FROM undergraduate NATURAL JOIN student WHERE EXISTS (SELECT * FROM student_quarter__attends WHERE idquarter=15 AND idstudent=?);
		SELECT * FROM degree WHERE type="BS";
	Generate result:
		(Generate the student's courses taken)
		SELECT * FROM student_instance NATURAL JOIN quarter_course_class__instance NATURAL JOIN course NATURAL JOIN course_coursenumber NATURAL JOIN coursenumber WHERE  idstudent=?;

		(Generate the degree's requirements)
		SELECT * FROM degree WHERE iddegree=?;
		SELECT * FROM lower_division WHERE iddegree=?;
		SELECT * FROM upper_division WHERE iddegree=?;
		
e. Assist a MS student in figuring out remaining degree requirements for a MS in Y:
	Generate form fields:
		SELECT * FROM ms NATURAL JOIN student NATURAL JOIN student_quarter__attends WHERE idquarter=15 AND ms.idstudent=student.idstudent AND student_quarter__attends.idstudent=student.idstudent AND student.idstudent=?;
		SELECT * FROM degree WHERE type="MS";
	Generate result:
		(Generate the student's courses taken)
		SELECT * FROM student_instance NATURAL JOIN quarter_course_class__instance NATURAL JOIN course NATURAL JOIN course_coursenumber NATURAL JOIN coursenumber WHERE  idstudent=?;

		(Generate the degree's requirements)
		SELECT * FROM degree WHERE iddegree=?;
		SELECT * FROM lower_division WHERE iddegree=?;
		SELECT * FROM upper_division WHERE iddegree=?;
		SELECT * FROM concentration NATURAL JOIN concentraion_course WHERE iddegree=?;

REPORT 2
a. Assist a student X in producing his class schedule:
	Generate form fields:
		SELECT * FROM student WHERE EXISTS (SELECT * FROM student_quarter__attends WHERE idquarter=15 AND idstudent=?);
	Generate result:
		(Generate the student's section's weekly)
			SELECT * FROM quarter_course_class__instance NATURAL JOIN student_instance NATURAL JOIN instance_section NATURAL JOIN section_weekly NATURAL JOIN weekly WHERE quarter_course_class__instance.idquarter=15 AND student_instance.idstudent=?

		(Generate the all section's weekly)
			SELECT * FROM quarter_course_class__instance NATURAL JOIN instance_section NATURAL JOIN section_weekly NATURAL JOIN weekly WHERE idquarter=15

b. Assist a professor X in scheduling a review session for a section Y offered in the current quarter during the time period from B to E: 
	(Generate form fields:)
	SELECT faculty_class_section.idsection, class.title FROM quarter_course_class__instance NATURAL JOIN quarter NATURAL JOIN class NATURAL JOIN faculty_class_section
WHERE season = "winter"
AND year = 2015

	(Generate days/times that enrolled students are not free:)
		SELECT day_of_week, start_time, end_time FROM quarter_course_class__instance NATURAL JOIN student_instance NATURAL JOIN instance_section NATURAL JOIN section_weekly NATURAL JOIN weekly WHERE quarter_course_class__instance.idquarter=15 AND student_instance.idstudent IN (SELECT idstudent FROM student_section__enrolled WHERE idsection = ?)
		
REPORT 3:


(Generate grade_conversion table)
create table GRADE_CONVERSION
( LETTER_GRADE CHAR(2) NOT NULL,
NUMBER_GRADE DECIMAL(2,1)
);
insert into grade_conversion values('A+', 4.3);
insert into grade_conversion values('A', 4);
insert into grade_conversion values('A-', 3.7);
insert into grade_conversion values('B+', 3.4);
insert into grade_conversion values('B', 3.1);
insert into grade_conversion values('B-', 2.8);
insert into grade_conversion values('C+', 2.5);
insert into grade_conversion values('C', 2.2);
insert into grade_conversion values('C-', 1.9);
insert into grade_conversion values('D', 1.6); 

(Generate grade distribution for faculty, course, and quarter)
SELECT grade, COUNT(*) FROM quarter NATURAL JOIN quarter_course_class_instance NATURAL JOIN faculty_instance_hastaught
WHERE faculty_name = ?
AND idcourse = ?
AND season = ?
AND year = ?
GROUP BY grade
ORDER BY grade

(Generate grade distribution for faculty)
SELECT grade, COUNT(*) AS received FROM quarter NATURAL JOIN quarter_course_class_instance NATURAL JOIN faculty_instance_hastaught NATURAL JOIN student_instance
WHERE faculty_name = ?
AND idcourse = ?
GROUP BY grade
ORDER BY grade

(Generate grade distribution for course)
SELECT grade, COUNT(*) FROM quarter NATURAL JOIN quarter_course_class_instance NATURAL JOIN faculty_instance_hastaught NATURAL JOIN student_instance
WHERE idcourse = ?
GROUP BY grade
ORDER BY grade

(Generate grade point average for faculty and course)
SELECT AVG(number_grade) FROM grade_conversion, quarter NATURAL JOIN quarter_course_class_instance NATURAL JOIN faculty_instance_hastaught NATURAL JOIN student_instance
WHERE faculty_name = ?
AND idcourse = ?
AND LETTER_GRADE = grade
GROUP BY number_grade


